"""latest migrations without multi tenancy

Revision ID: 18db8971cb53
Revises: 
Create Date: 2025-03-18 11:36:14.120995

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '18db8971cb53'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('comments', sa.Column('comment_id', sa.Integer(), nullable=False))
    op.add_column('comments', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('comments', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.add_column('comments', sa.Column('user_id', sa.Integer(), nullable=True))
    op.alter_column('comments', 'ticket_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_index('ix_comments_id', table_name='comments')
    op.create_index(op.f('ix_comments_comment_id'), 'comments', ['comment_id'], unique=False)
    op.drop_constraint('comments_ticket_id_fkey', 'comments', type_='foreignkey')
    op.create_foreign_key(None, 'comments', 'tickets', ['ticket_id'], ['ticket_id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'comments', 'users', ['user_id'], ['user_id'], ondelete='SET NULL')
    op.drop_column('comments', 'id')
    op.alter_column('products', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.create_unique_constraint(None, 'products', ['name'])
    op.drop_constraint('role_permissions_permission_id_fkey', 'role_permissions', type_='foreignkey')
    op.drop_constraint('role_permissions_role_id_fkey', 'role_permissions', type_='foreignkey')
    op.create_foreign_key(None, 'role_permissions', 'roles', ['role_id'], ['role_id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'role_permissions', 'permissions', ['permission_id'], ['permission_id'], ondelete='CASCADE')
    op.add_column('roles', sa.Column('name', sa.String(length=100), nullable=False))
    op.add_column('roles', sa.Column('permissions', postgresql.JSONB(astext_type=sa.Text()), nullable=False))
    op.add_column('roles', sa.Column('description', sa.String(length=255), nullable=True))
    op.drop_constraint('roles_role_name_key', 'roles', type_='unique')
    op.create_unique_constraint(None, 'roles', ['name'])
    op.drop_constraint('roles_tenant_id_fkey', 'roles', type_='foreignkey')
    op.drop_column('roles', 'role_name')
    op.drop_column('roles', 'tenant_id')
    op.alter_column('status', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('status', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint('subscriptions_user_id_fkey', 'subscriptions', type_='foreignkey')
    op.drop_constraint('subscriptions_product_id_fkey', 'subscriptions', type_='foreignkey')
    op.create_foreign_key(None, 'subscriptions', 'users', ['user_id'], ['user_id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'subscriptions', 'products', ['product_id'], ['product_id'], ondelete='CASCADE')
    op.add_column('super_admins', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('super_admins', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.alter_column('super_admins', 'name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=100),
               existing_nullable=False)
    op.add_column('tenants', sa.Column('name', sa.String(length=100), nullable=False))
    op.add_column('tenants', sa.Column('description', sa.String(length=255), nullable=True))
    op.add_column('tenants', sa.Column('status', sa.String(length=50), nullable=False))
    op.add_column('tenants', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('tenants', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.drop_constraint('tenants_tenant_name_key', 'tenants', type_='unique')
    op.drop_column('tenants', 'tenant_name')
    op.add_column('ticket_transfers', sa.Column('transfer_date', sa.DateTime(), nullable=False))
    op.alter_column('ticket_transfers', 'to_assignee',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('ticket_transfers', 'transferred_at')
    op.add_column('tickets', sa.Column('tenant_id', sa.Integer(), nullable=False))
    op.alter_column('tickets', 'description',
               existing_type=sa.TEXT(),
               type_=sa.String(length=1000),
               existing_nullable=True)
    op.alter_column('tickets', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('tickets', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.create_index(op.f('ix_tickets_ticket_id'), 'tickets', ['ticket_id'], unique=False)
    op.drop_constraint('tickets_assigned_to_fkey', 'tickets', type_='foreignkey')
    op.drop_constraint('tickets_status_id_fkey', 'tickets', type_='foreignkey')
    op.drop_constraint('tickets_priority_id_fkey', 'tickets', type_='foreignkey')
    op.create_foreign_key(None, 'tickets', 'tenants', ['tenant_id'], ['tenant_id'])
    op.drop_column('tickets', 'assigned_to')
    op.drop_column('tickets', 'priority_id')
    op.drop_column('tickets', 'status_id')
    op.add_column('users', sa.Column('tenant_id', sa.Integer(), nullable=False))
    op.add_column('users', sa.Column('status', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('created_at', sa.DateTime(), nullable=True))
    op.add_column('users', sa.Column('updated_at', sa.DateTime(), nullable=True))
    op.drop_index('ix_users_email', table_name='users')
    op.create_index(op.f('ix_users_user_id'), 'users', ['user_id'], unique=False)
    op.create_unique_constraint(None, 'users', ['email'])
    op.create_foreign_key(None, 'users', 'tenants', ['tenant_id'], ['tenant_id'])
    op.drop_column('users', 'product_subscriptions')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('product_subscriptions', postgresql.ARRAY(sa.INTEGER()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_constraint(None, 'users', type_='unique')
    op.drop_index(op.f('ix_users_user_id'), table_name='users')
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.drop_column('users', 'updated_at')
    op.drop_column('users', 'created_at')
    op.drop_column('users', 'status')
    op.drop_column('users', 'tenant_id')
    op.add_column('tickets', sa.Column('status_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tickets', sa.Column('priority_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('tickets', sa.Column('assigned_to', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'tickets', type_='foreignkey')
    op.create_foreign_key('tickets_priority_id_fkey', 'tickets', 'priorities', ['priority_id'], ['priority_id'])
    op.create_foreign_key('tickets_status_id_fkey', 'tickets', 'status', ['status_id'], ['status_id'])
    op.create_foreign_key('tickets_assigned_to_fkey', 'tickets', 'users', ['assigned_to'], ['user_id'])
    op.drop_index(op.f('ix_tickets_ticket_id'), table_name='tickets')
    op.alter_column('tickets', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('tickets', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('tickets', 'description',
               existing_type=sa.String(length=1000),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.drop_column('tickets', 'tenant_id')
    op.add_column('ticket_transfers', sa.Column('transferred_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.alter_column('ticket_transfers', 'to_assignee',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.drop_column('ticket_transfers', 'transfer_date')
    op.add_column('tenants', sa.Column('tenant_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.create_unique_constraint('tenants_tenant_name_key', 'tenants', ['tenant_name'])
    op.drop_column('tenants', 'updated_at')
    op.drop_column('tenants', 'created_at')
    op.drop_column('tenants', 'status')
    op.drop_column('tenants', 'description')
    op.drop_column('tenants', 'name')
    op.alter_column('super_admins', 'name',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=255),
               existing_nullable=False)
    op.drop_column('super_admins', 'updated_at')
    op.drop_column('super_admins', 'created_at')
    op.drop_constraint(None, 'subscriptions', type_='foreignkey')
    op.drop_constraint(None, 'subscriptions', type_='foreignkey')
    op.create_foreign_key('subscriptions_product_id_fkey', 'subscriptions', 'products', ['product_id'], ['product_id'])
    op.create_foreign_key('subscriptions_user_id_fkey', 'subscriptions', 'users', ['user_id'], ['user_id'])
    op.alter_column('status', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('status', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.add_column('roles', sa.Column('tenant_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('roles', sa.Column('role_name', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
    op.create_foreign_key('roles_tenant_id_fkey', 'roles', 'tenants', ['tenant_id'], ['tenant_id'])
    op.drop_constraint(None, 'roles', type_='unique')
    op.create_unique_constraint('roles_role_name_key', 'roles', ['role_name'])
    op.drop_column('roles', 'description')
    op.drop_column('roles', 'permissions')
    op.drop_column('roles', 'name')
    op.drop_constraint(None, 'role_permissions', type_='foreignkey')
    op.drop_constraint(None, 'role_permissions', type_='foreignkey')
    op.create_foreign_key('role_permissions_role_id_fkey', 'role_permissions', 'roles', ['role_id'], ['role_id'])
    op.create_foreign_key('role_permissions_permission_id_fkey', 'role_permissions', 'permissions', ['permission_id'], ['permission_id'])
    op.drop_constraint(None, 'products', type_='unique')
    op.alter_column('products', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.add_column('comments', sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'comments', type_='foreignkey')
    op.drop_constraint(None, 'comments', type_='foreignkey')
    op.create_foreign_key('comments_ticket_id_fkey', 'comments', 'tickets', ['ticket_id'], ['ticket_id'])
    op.drop_index(op.f('ix_comments_comment_id'), table_name='comments')
    op.create_index('ix_comments_id', 'comments', ['id'], unique=False)
    op.alter_column('comments', 'ticket_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_column('comments', 'user_id')
    op.drop_column('comments', 'updated_at')
    op.drop_column('comments', 'created_at')
    op.drop_column('comments', 'comment_id')
    # ### end Alembic commands ###
